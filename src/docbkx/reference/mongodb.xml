<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="mongo.core">
  <title>Core support</title>

  <para>One of the document stores supported by DATADOC is <ulink
  url="http://www.mongodb.org/">MongoDB</ulink>. To quote the project home
  page: <quote> MongoDB (from "humongous") is a scalable, high-performance,
  open source, document-oriented database. </quote> <para>Spring Data Document
  provides easy configuration and access to MongoDB from a Spring application.
  Offers both low-level and high-level abstraction for interacting with the
  store, freeing the user from infrastructural concerns.</para></para>

  <section id="mongodb:requirements">
    <title>MongoDB Requirements</title>

    <para>DATADOC requires MongoDB 1.4 while 1.6 is recommended.</para>
  </section>

  <section id="mongodb:architecture">
    <title>MongoDB Support High Level View</title>

    <para>The MongoDB support provides several components:</para>

    <itemizedlist>
      <listitem>
         

        <emphasis>Configuration Factory</emphasis>

         - for configuring and handling communication with MongoDB via its Java driver 
      </listitem>

      <listitem>
         

        <emphasis>Template implemenattion</emphasis>

         - providing a generified, user friendly template classes for interacting with MongoDB. 

        <xref linkend="mongodb:template" />

         explains the abstraction builds on top of the low-level MongoDB Java API to handle the storage and retrieval of documents plus mapping between documents and domain classes. 
      </listitem>

      <listitem>
         

        <emphasis>Support Classes</emphasis>

         - that offer reusable components such as mapping support and exception translation. 
      </listitem>
    </itemizedlist>

    <para>For most tasks, the higher-level abstractions and support services
    are the best choice. Note that at any point, one can move between layers -
    for example, it's very easy to get a hold of the low level connection
    (org.mongo.DB) to communicate directly with MongoDB.</para>
  </section>

  <section id="mongodb:connectors">
    <title>Connecting to MongoDB</title>

    <para>One of the first tasks when using MongoDB and Spring is to connect
    to the store through the IoC container. To do that</para>

    <para>The easiest way to work with a
    <interfacename>MongoFactoryBean</interfacename> is to configure a
    <classname>MongoFactory</classname> bean. This has the added advantage of
    also acting as an ExceptionTranslator that can be used to translate any
    Mongo exceptions to exceptions in the
    <classname>SpringDataAccessException</classname> hierarchy as long as your
    data access classes are annotatded with @Repository and you are using an
    <classname>PersistenceExceptionTranslationPostProcessor</classname> (see
    <link linkend="???">Spring API docs</link>).</para>

    <para>You have two basic choices - use Java based configuration or XML
    based configuration. An example fo a basic Java configuratopn style
    is:</para>

    <example>
      <title>Java based Spring configuration for MongoDB</title>

      <programlisting language="java">@Configuration
public class AppConfig {

    /*
     * Factory bean that creates the Mongo instance
     */
    public @Bean MongoFactoryBean mongo() {
        MongoFactoryBean mongo = new MongoFactoryBean();
        mongo.setHost("localhost");
        return mongo; 
    }
    
    /*
     * A basic MongoTemplate instance
     */
    public @Bean MongoTemplate mongoTemplate(Mongo mongo) {
        MongoTemplate mongoTemplate = new MongoTemplate(mongo, "test", "HelloMongo");
        return mongoTemplate;
    }

    /* 
     * Use this post processor to translate any MongoExceptions thrown in @Repository annotated classes
     */
    public @Bean PersistenceExceptionTranslationPostProcessor persistenceExceptionTranslationPostProcessor() {
        return new PersistenceExceptionTranslationPostProcessor();
    }

}
</programlisting>
    </example>

    <para>The following shows the same configuration using XML:</para>

    <example>
      <title>XML based Spring configuration for MongoDB</title>

      <programlisting language="xml">&lt;!-- Factory bean that creates the Mongo instance --&gt;
&lt;bean id="mongo" class="org.springframework.data.document.mongodb.MongoFactoryBean"&gt;
    &lt;property name="host" value="localhost"/&gt;
&lt;/bean&gt;

&lt;!-- A basic MongoTemplate instance --&gt;
&lt;bean id="mongoTemplate" class="org.springframework.data.document.mongodb.MongoTemplate"&gt;
    &lt;constructor-arg name="mongo" ref="mongo"/&gt;
    &lt;constructor-arg name="databaseName" value="test"/&gt;
    &lt;constructor-arg name="defaultCollectionName" value="HelloMongo"/&gt;
&lt;/bean&gt;

&lt;!-- Use this post processor to translate any MongoExceptions thrown in @Repository annotated classes --&gt;
&lt;bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/&gt;
</programlisting>
    </example>
  </section>

  <section id="mongodb:template">
    <title>Working with objects using the
    <classname>MongoTemplate</classname></title>

    <para>Most users are likely to use <classname>MongoTemplate</classname>
    and its corresponding package
    <literal>org.springframework.data.document.mongodb</literal> - the
    template is in fact the central class of the MongoDB module due to its
    rich feature set. The template offers convenience methods and automatic
    mapping between MongoDB JSON documents and your domain classes. Out of the
    box, <classname>MongoTemplate</classname> uses a Java-based default
    converter but you can also write your own converter classes to be used for
    reading and storing domain objects. Once configured, the template is
    thread-safe and can be reused across multiple instances.</para>

    <para>Let's look at a couple of examples for how to work with the
    <classname>MongoTemplate</classname>.</para>

    <section id="mongodb:template">
      <title>Working with collections</title>

      <para>...</para>
    </section>

    <section id="mongodb:template">
      <title>Creating an index</title>

      <para>...</para>
    </section>

    <section id="mongodb:template">
      <title>Saving and retreiving objects as documents in a
      collection</title>

      <para>...</para>
    </section>

    <section id="mongodb:template">
      <title>Querying documents in a collection</title>

      <para>...</para>
    </section>

    <section id="mongodb:template">
      <title>Updating documents in a collection</title>

      <para>...</para>
    </section>
  </section>

  <section id="mongodb:future">
    <title>Roadmap ahead</title>

    <para>The Spring Data Document projects MongoDB support is in its early
    stages. We are interested in feedback, knowing what your use cases are,
    what are the common patters you encounter so that the MongoDB module
    better serves your needs. Do contact us using the channels <link
    linkend="get-started:help:community">mentioned</link> above, we are
    interested in hearing from you!</para>
  </section>
</chapter>
